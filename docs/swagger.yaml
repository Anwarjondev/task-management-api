definitions:
  models.Project:
    properties:
      description:
        maxLength: 500
        type: string
      id:
        type: string
      members:
        items:
          $ref: '#/definitions/models.User'
        type: array
      name:
        maxLength: 10
        minLength: 3
        type: string
      owner:
        $ref: '#/definitions/models.User'
      owner_id:
        type: string
      tasks:
        items:
          $ref: '#/definitions/models.Task'
        type: array
    required:
    - name
    type: object
  models.Subtask:
    properties:
      assignee:
        $ref: '#/definitions/models.User'
      assignee_id:
        type: string
      creator:
        $ref: '#/definitions/models.User'
      creator_id:
        type: string
      id:
        type: string
      status:
        type: string
      task:
        $ref: '#/definitions/models.Task'
      task_id:
        type: string
      title:
        minLength: 3
        type: string
    required:
    - status
    - task_id
    - title
    type: object
  models.Task:
    properties:
      assignee:
        $ref: '#/definitions/models.User'
      assignee_id:
        type: string
      creator:
        $ref: '#/definitions/models.User'
      creator_id:
        type: string
      description:
        maxLength: 500
        type: string
      id:
        type: string
      project:
        $ref: '#/definitions/models.Project'
      project_id:
        type: string
      status:
        enum:
        - pending
        - in_progress
        - completed
        type: string
      subtasks:
        items:
          $ref: '#/definitions/models.Subtask'
        type: array
      title:
        type: string
    required:
    - project_id
    - status
    - title
    type: object
  models.User:
    properties:
      id:
        type: string
      password:
        minLength: 6
        type: string
      projects:
        items:
          $ref: '#/definitions/models.Project'
        type: array
      role:
        enum:
        - admin
        - manager
        - team_member
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - password
    - role
    - username
    type: object
  utils.ErrorResponse:
    properties:
      message:
        type: string
      status:
        type: integer
    type: object
info:
  contact: {}
paths:
  /admin/users:
    get:
      description: Get all users (admin only)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: List users
      tags:
      - Users
  /admin/users/{id}:
    delete:
      description: Delete a user (admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No content
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - Users
  /createproject:
    post:
      consumes:
      - application/json
      description: Create a new project owned by the authenticated user
      parameters:
      - description: Project data
        in: body
        name: project
        required: true
        schema:
          $ref: '#/definitions/models.Project'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Project'
        "400":
          description: Invalid request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create a project
      tags:
      - Projects
  /createtask:
    post:
      consumes:
      - application/json
      description: Create a task in a project
      parameters:
      - description: Task data
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/models.Task'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Task'
        "400":
          description: Invalid request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create a task
      tags:
      - Tasks
  /getproject:
    get:
      description: Get projects accessible to the user with pagination
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: per_page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Project'
            type: array
        "401":
          description: Unauthorized
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: List projects
      tags:
      - Projects
  /gettask:
    get:
      description: Get tasks accessible to the user with pagination
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: per_page
        type: integer
      - description: Filter by status
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Task'
            type: array
        "401":
          description: Unauthorized
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: List tasks
      tags:
      - Tasks
  /login:
    post:
      consumes:
      - application/json
      description: Login with username and password to receive a JWT
      parameters:
      - description: User credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request
          schema:
            type: string
        "401":
          description: Invalid credentials
          schema:
            type: string
      summary: User login
      tags:
      - Authentication
  /projects/{id}:
    delete:
      description: Delete a project if the user is the owner or admin
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No content
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not found
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete a project
      tags:
      - Projects
    put:
      consumes:
      - application/json
      description: Update a project if the user is the owner or admin
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated project data
        in: body
        name: project
        required: true
        schema:
          $ref: '#/definitions/models.Project'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Project'
        "400":
          description: Invalid request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update a project
      tags:
      - Projects
  /projects/{id}/members:
    post:
      consumes:
      - application/json
      description: Add a user to a project if the user is the owner or admin
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: User ID to add
        in: body
        name: user
        required: true
        schema:
          additionalProperties:
            type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Project'
        "400":
          description: Invalid request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not found
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Add project member
      tags:
      - Projects
  /register:
    post:
      consumes:
      - application/json
      description: Register a user with username, password, and optional role
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      summary: Register a new user
      tags:
      - Authentication
  /subtasks:
    get:
      description: Get subtasks accessible to the user with pagination
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: per_page
        type: integer
      - description: Filter by task ID
        in: query
        name: task_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Subtask'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List subtasks
      tags:
      - Subtasks
    post:
      consumes:
      - application/json
      description: Create a subtask under a task
      parameters:
      - description: Subtask data
        in: body
        name: subtask
        required: true
        schema:
          $ref: '#/definitions/models.Subtask'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Subtask'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a subtask
      tags:
      - Subtasks
  /subtasks/{id}:
    delete:
      description: Delete a subtask if the user is the creator or admin
      parameters:
      - description: Subtask ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No content
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a subtask
      tags:
      - Subtasks
    put:
      consumes:
      - application/json
      description: Update a subtask if the user is the creator, assignee, or admin
      parameters:
      - description: Subtask پردی ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated subtask data
        in: body
        name: subtask
        required: true
        schema:
          $ref: '#/definitions/models.Subtask'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Subtask'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a subtask
      tags:
      - Subtasks
  /tasks/{id}:
    delete:
      description: Delete a task if the user is the creator or admin
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No content
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not found
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete a task
      tags:
      - Tasks
    put:
      consumes:
      - application/json
      description: Update a task if the user is the creator, assignee, or admin
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated task data
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/models.Task'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Task'
        "400":
          description: Invalid request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not found
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update a task
      tags:
      - Tasks
  /users/{id}:
    put:
      consumes:
      - application/json
      description: Update a user's details
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated user data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not found
          schema:
            type: string
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user
      tags:
      - Users
swagger: "2.0"
